//various procedures for compatability with various Maya versions.

global proc string[] createNConstraint( string $constraintType, int $createSet )
//
//	Description:
//
//		Given a selected list of nucleus objects and components, create 
//      nComponent objects and attach these to a constraint, based on
//		the desired constraint type
//
{
	if( !nClothEditLicenseFound() ) {        
		error(uiRes("m_createNCloth.kNoNClothLicense"));
		return {};
	}

	// Nodes created by this routine
	string $newNodes[];

	// Get the selection( including vertices )
	string $selected[] = `ls -sl -flatten`;
	$selected = stringArrayRemoveDuplicates( $selected );
	int $numSelected = size( $selected );
	if( $numSelected < 1 ){
		warning((uiRes("m_createNConstraint.kNothingToConstrain")) );
		return {};
	}

	int $tearable = ($constraintType == "tearableSurface");
	int $weldBorders = ($constraintType == "weldBorders");
	int $force = ($constraintType == "force");
	int $match = ($constraintType == "match");
	int $collideExclude = ($constraintType == "collisionExclusion");
	int $collideDisable = ($constraintType == "disableCollision");

	if( $tearable || $weldBorders ){
		// string $nParticles[] = `ls -sl -visible -ni -o -dag -type nParticle`;
		string $nParticles[] = `ls -sl -ni -o -dag -type nParticle`;
		if( size( $nParticles ) > 0 ){
			warning((uiRes("m_createNConstraint.kParticlesNoSupported")));
			return {};
		}
	}

	// Get the selected meshes
	// string $selectedObjects[] = `ls -sl -visible -ni -o -dag -type mesh -type nParticle`;
	string $selectedObjects[] = `ls -sl -ni -o -dag -type mesh -type nParticle`;
	$selectedObjects = stringArrayRemoveDuplicates( $selectedObjects );
	int $numObjects = size( $selectedObjects );
	if( $numObjects < 1 ){
		warning((uiRes("m_createNConstraint.kNeedToSelectMesh")));
		return {};
	}
	if( $match ){
		string $needMatch = (uiRes("m_createNConstraint.kNeedMatch"));
		if( $numObjects != 2 || $numSelected != 2){
			warning( $needMatch );
			return {};
		}
	}

	if( $numSelected < 2 && !$weldBorders && !$force && $constraintType != "transform" && !$collideDisable && endsWith($selected[0],"]") ){
		warning((uiRes("m_createNConstraint.kNeedToSelectSurface")) );
		return {};
	}

	string $parentObject = "";
	if( $constraintType == "transform" ){
		// string $locators[] = `ls -sl -visible -ni -o -dag -type locator`;
		string $locators[] = `ls -sl -ni -o -dag -type locator`;
		if( size( $locators ) > 0 ){
			$parentObject = $locators[0];
		}
	}

	string $pToSurfObj = "";
	int $surfConstraint = ($constraintType == "pointToSurface" || $constraintType == "slideOnSurface");
	if( $surfConstraint ){
		if( $numObjects < 2 ){
			warning((uiRes("m_createNConstraint.kNeedVerticesAndSurface")));
			return {};
		}
		// string $selObjs[] = `ls -sl -visible -ni -dag -type mesh`;
		string $selObjs[] = `ls -sl -ni -dag -type mesh`;
		int $numSurf = size( $selObjs );
		if( $numSurf == 0 ){
			warning((uiRes("m_createNConstraint.kNoSurfaceToConstrain")));
			return {};
		}	
		if( $numSurf > 1 ){
			warning( (uiRes("m_createNConstraint.kSelectSurfaceToConstrain")) );
			return {};
		}	
		$pToSurfObj = $selObjs[0];
	}
	int $positionAtMidpoint = ($collideDisable || $force || $constraintType == "transform");
	float $bb[];
	if( $positionAtMidpoint ){
		$bb = `exactWorldBoundingBox`;
	}

	string $nucleus = "";
	string $obj;
	// find nucleus node
	int $makePassive[];
	int $i;
	for( $i = 0; $i < $numObjects; $i++ ){	
		string $obj = $selectedObjects[$i];

		string $partObj = findTypeInHistory( $obj, "nBase", 1,1 );
		// string $cons[] = `listConnections -sh 1 -type nBase $obj`;
		$makePassive[$i] = true;
		if( $partObj != "" ){
			string $cons[] = `listConnections -sh 1 -type nucleus $partObj`;
			if( size( $cons ) < 0  ){
				string $fmt = (uiRes("m_createNConstraint.kNoSolver"));
				warning( `format -s $obj $fmt`);
				return {};
			}
			if( $nucleus != "" ){
				if( $nucleus != $cons[0]){
					warning((uiRes("m_createNConstraint.kDifferntSolvers")));
					return {};
				}
			} else {
				$nucleus = $cons[0];
			}
			
			$makePassive[$i] = false;
		} else if( $constraintType == "transform" && $parentObject == ""){
			$parentObject = $obj;
		}

		if( $tearable && $makePassive[$i] == true ){
			warning((uiRes("m_createNConstraint.kNeedCloth")));
			return {};
		}
	}
	if( $nucleus == "" ){
		warning((uiRes("m_createNConstraint.kNoClothToConstrain")));
		return {};
	}
	
	if( !$tearable && $constraintType != "transform"){
		for( $i = 0; $i < $numObjects; $i++ ){	
			if( $makePassive[$i] ){
				$newNodes[size($newNodes)] = makePassiveNObj( $selectedObjects[$i], $nucleus );
			}
		}
	}

	if( $surfConstraint ){
		// make the constrain surface the first component
		for( $i = 0; $i < $numObjects; $i++ ){	
			if( $selectedObjects[$i] == $pToSurfObj ){
				if( $i != 0 ){
					// swap positions
					$selectedObjects[$i] = $selectedObjects[0];
					$selectedObjects[0] = $pToSurfObj;
					break;
				}
			}
		}
	}

    if( $tearable ){
		if( !setupForTearConstraint( $selectedObjects, $selected ) ){
			return {};
		}
		$numSelected = size( $selected ); // could have changed as result of tear
	}
	
	if( $createSet ){
		// string $nParticles[] = `ls -sl -visible -ni -o -dag -type nParticle`;
		string $nParticles[] = `ls -sl -ni -o -dag -type nParticle`;
		if( size( $nParticles ) > 0 ){
			warning((uiRes("m_createNConstraint.kParticleSetsNotSupported")));
			$createSet = false;
		}
	}

	string $constraint = `createNode dynamicConstraint`;
	$newNodes[size($newNodes)] = $constraint;

	if( $positionAtMidpoint ){
		move (($bb[0] + $bb[3])*0.5) 
			 (($bb[1] + $bb[4])*0.5) 
			 (($bb[2] + $bb[5])*0.5) $constraint;
	}
	if( $constraintType == "transform" || $collideDisable || $force){
		setAttr ($constraint + ".constraintRelation") 0; // object to constraint 
		setAttr ($constraint + ".componentRelation") 0; // all to first 
		if( $force ){
			setAttr ($constraint + ".strength") 0.0;
			setAttr ($constraint + ".tangentStrength") 0.0;
			setAttr ($constraint + ".force") 1.0;
			setAttr ($constraint + ".dropoffDistance") 1.0;
			setAttr ($constraint + ".strengthDropoff[1].strengthDropoff_Position") 1;
			setAttr ($constraint + ".strengthDropoff[1].strengthDropoff_FloatValue") 0;
			setAttr ($constraint + ".strengthDropoff[1].strengthDropoff_Interp") 1;
		}
		if( $constraintType == "transform" && $parentObject != ""){
			if( nodeType( $parentObject ) != "transform"){
				string $tforms[] = listTransforms( $parentObject );
				$parentObject = $tforms[0];
			}	
			parent -r -s $constraint $parentObject;
			string $fmt = (uiRes("m_createNConstraint.kParentingMsg"));
			print(`format -s $parentObject $fmt`);
		}
	} else if( $constraintType == "pointToSurface" ){
		setAttr ($constraint + ".constraintRelation") 1; // object to object
		setAttr ($constraint + ".componentRelation") 0; // all to first 
	} else if( $match ){
		setAttr ($constraint + ".constraintRelation") 1; // object to object
		setAttr ($constraint + ".componentRelation") 0; // all to first 
		setAttr ($constraint + ".strength") 0.8;
		setAttr ($constraint + ".tangentStrength") 0.2;
		setAttr ($constraint + ".restLengthScale") 0.0;
	} else if( $constraintType == "slideOnSurface" ){
		setAttr ($constraint + ".constraintRelation") 1; // object to object
		setAttr ($constraint + ".componentRelation") 0; // all to first 
		setAttr ($constraint + ".connectionUpdate") 1; // Per frame 
		setAttr ($constraint + ".friction") 0.1;
		setAttr ($constraint + ".strength") 0.02;
		setAttr ($constraint + ".tangentStrength") 0.2;
		setAttr ($constraint + ".localCollide") true;
	} else if( $weldBorders ){
		setAttr ( $constraint+ ".constraintMethod" ) 0; // weld
		setAttr ($constraint + ".connectionMethod") 1; // max distance 
		setAttr ($constraint + ".constraintRelation") 1; // object to object
		setAttr ($constraint + ".componentRelation") 1; // all to all 
		setAttr ( $constraint+ ".maxDistance" ) 0.05;
		if( $numObjects == 1 ){
			setAttr ( $constraint+ ".connectWithinComponent" ) true;
		}
	} else if( $constraintType == "pointToPoint" || $collideExclude ){
		setAttr ($constraint + ".connectionMethod") 2; // nearest pair 
		setAttr ($constraint + ".constraintRelation") 1; // object to object
		setAttr ($constraint + ".componentRelation") 1; // all to all 
		if( $numObjects == 1 ){
			setAttr ( $constraint+ ".connectWithinComponent" ) true;
		}
	} else if( $tearable ){
		setAttr ( $constraint+ ".constraintMethod" ) 0; // weld
		setAttr ($constraint + ".connectionMethod") 1; // max distance 
		setAttr ($constraint + ".constraintRelation") 1; // object to object
		setAttr ($constraint + ".componentRelation") 1; // all to all 
		setAttr ( $constraint+ ".connectWithinComponent" ) true;
		setAttr ( $constraint+ ".glueStrength" ) 0.1;
		setAttr ( $constraint+ ".maxDistance" ) 0.01;
	} else {
		setAttr ($constraint + ".constraintRelation") 1; // object to object
		setAttr ($constraint + ".componentRelation") 1; // all to all 
	}
	if( $collideDisable || $collideExclude ){
		setAttr( $constraint + ".strength" ) 0.0;
		setAttr( $constraint + ".tangentStrength" ) 0.0;
		setAttr( $constraint + ".collide" ) false;
		setAttr( $constraint + ".excludeCollisions" ) true;
		setAttr( $constraint + ".displayConnections" ) false;
	}

	string $mixedTypeWarning = (uiRes("m_createNConstraint.kMixedType"));	
	string $buffer[];
	string $nComponents[];
	string $compTypes[];

	// create the nComponents
	for( $i = 0; $i < $numObjects; $i++ ){	
		if( $constraintType == "transform" && $makePassive[$i] ){
			continue;
		}
		string $obj = $selectedObjects[$i];
		string $nObject = findTypeInHistory( $obj, "nBase", 1,1 );
		string $component = `createNode nComponent`;
		$nComponents[ $i ] = $component;
		connectAttr ( $nObject + ".nucleusId") ($component + ".objectId");
		string $tforms[] = listTransforms( $obj );
		string $objTform = $tforms[0];
		int $numComponents = 0;
		int $j;
		string $inputMeshComponents[] = {};
		string $inputMesh[] = {};
		int $compIndices[] = {};
		int $compType = 6; // surface
		int $doCreateSet = $createSet;
	
		for( $j = 0; $j < $numSelected; $j++ ){
			string $sel = $selected[$j];
			string $replaceObj = $obj;
			if( startsWith( $sel, $obj + ".vtx[" ) ){
				if( $numComponents == 0 ){
					$compType = 2; // point
				}   else if( $compType != 2 ){
					warning( `format -s $obj $mixedTypeWarning` );
					break;
				}
				$replaceObj = $obj;
			} else if( startsWith( $sel, $objTform + ".vtx[" ) ){
				if( $numComponents == 0 ){
					$compType = 2; // point
				}   else if( $compType != 2 ){
					warning( `format -s $obj $mixedTypeWarning` );
					break;
				}
				$replaceObj = $objTform;
			} else if( startsWith( $sel, $obj + ".e[" ) ){
				if( $numComponents == 0 ){
					$compType = 3; // edge
				}   else if( $compType != 3 ){
					warning( `format -s $obj $mixedTypeWarning` );
					break;
				}
				$replaceObj = $obj;
			} else if ( startsWith( $sel, $objTform + ".e[" ) ){
				if( $numComponents == 0 ){
					$compType = 3; // edge
				}   else if( $compType != 3 ){
					warning( `format -s $obj $mixedTypeWarning` );
					break;
				}
				$replaceObj = $objTform;
			} else if( startsWith( $sel, $obj + ".f[" ) ){
				if( $numComponents == 0 ){
					$compType = 4; // face
				}   else if( $compType != 4 ){
					warning( `format -s $obj $mixedTypeWarning` );
					break;
				}
				$replaceObj = $obj;
			} else if( startsWith( $sel, $objTform + ".f[" ) ){
				if( $numComponents == 0 ){
					$compType = 4; // face
				}   else if( $compType != 4 ){
					warning( `format -s $obj $mixedTypeWarning` );
					break;
				}
				$replaceObj = $objTform;
			} else if( startsWith( $sel, $obj + ".pt[" ) ){
				if( $numComponents == 0 ){
					$compType = 7; // particle vertex
				}   else if( $compType != 7 ){
					warning( `format -s $obj $mixedTypeWarning` );
					break;
				}
				$replaceObj = $obj;
			} else if( startsWith( $sel, $objTform + ".pt[" ) ){
				if( $numComponents == 0 ){
					$compType = 7; // particle vertex
				}   else if( $compType != 7 ){
					warning( `format -s $obj $mixedTypeWarning` );
					break;
				}
				$replaceObj = $objTform;	
			} else {
				continue;
			} 

			if( $doCreateSet &&  $numComponents == 0 ){
				// sets are applied on the input to nCloth nodes not the outputs
				// so that construction history added later is reflected in the set.
				$inputMesh = getInputMeshForSets( $obj );	
				if( size($inputMesh)== 0 ){
					// still try to create a component constraint without a set
					$doCreateSet = false;
				}
			}

			if( $doCreateSet ){
				$inputMeshComponents[$numComponents] = `substitute $replaceObj $sel $inputMesh[0]`;
				$numComponents++;
			} else {
				int $numTokens = `tokenize $sel "[]" $buffer`;	
				if( $numTokens == 2 ){
					int $compInd = $buffer[1];
					setAttr ($component + ".componentIndices[" + $numComponents + "]") $compInd;
					$compIndices[$numComponents] = $compInd;
					$numComponents++;
				}
			}
		}

		int $doBend = false;
		if( $tearable ){
			if( "nCloth" == nodeType( $nObject ) ){
				float $bend = getAttr( $nObject + ".bendResistance");
				if( $bend > 0.2 ){
					$doBend = true;
					setAttr ($constraint + ".bendStrength") $bend; 
					setAttr ($constraint + ".bend") true;
					setAttr ($constraint + ".bendBreakAngle") 5.0;
				}
			}
		}	
	
		if( $compType == 7 ){
			// treat particle points as vertices
			setAttr ($component+  ".componentType") 2;
		} else {
			setAttr ($component+  ".componentType") $compType;
		}		
		
		if( $compType == 3 && $numObjects == 1 && $constraintType == "pointToPoint"){
			// For edge components on single objects we set to componentOrder
			// which essentially treats each edge as being a link, rather than
			// forming links between edges.
			setAttr ($constraint + ".connectionMethod") 0; // component order 
		}			
		$compTypes[ $i ] = $compType;
		if( $numComponents == 0 ){	
			if( $weldBorders ){
				setAttr ($component+  ".elements") 1; // BORDERS
				setAttr ($component+  ".componentType") 3; // edge
				$compTypes[ $i ] = 3;
			} else {
				setAttr ($component+  ".elements") 2; // ALL
				if( $doBend ){
					setAttr ($component+  ".componentType") 3; // edge
					$compTypes[ $i ] = 3;
				} else if( $tearable || $force || $match || $constraintType == "pointToPoint" ){
					setAttr ($component+  ".componentType") 2; // point
					$compTypes[ $i ] = 2;
				}
			}
		} else {
			if( isAllComponents( $obj, $numComponents, $compType ) ){
				setAttr ($component+  ".elements") 2; // ALL
			} else if( isAllBorderComponents( $obj, $compIndices, $compType ) ){
				setAttr ($component+  ".elements") 1; // ALL BORDERS
			} else {
				setAttr ($component+  ".elements") 0; // indice list
		 		if( $doCreateSet ){
					makeSetForComponent( $component, $inputMesh[1], $inputMeshComponents );
				}
			}
		}
	}

	// connect components to constraint	
	if( $constraintType == "pointToSurface"  || $constraintType == "slideOnSurface"){
		// put the surface at the head of the list... there should only be one
		int $ind = 0;
		for( $i = 0; $i < $numObjects; $i++ ){	
			if( $compTypes[ $i ] == 6 ) { // is a surface
				connectAttr ($nComponents[$i] + ".outComponent") ($constraint + ".componentIds[" + $ind + "]");
				$ind++;
			}
		}
		for( $i = 0; $i < $numObjects; $i++ ){	
			if( $compTypes[ $i ] != 6 ) { // is NOT a surface
				connectAttr ($nComponents[$i] + ".outComponent") ($constraint + ".componentIds[" + $ind + "]");
				$ind++;
			}
		}
			
	} else {
		for( $i = 0; $i < $numObjects; $i++ ){	
			if( $constraintType == "transform" && $makePassive[$i] ){
				continue;
			}
			connectAttr ($nComponents[$i] + ".outComponent") ($constraint + ".componentIds[" + $i + "]");
		}
	}

	int $nucleusConstraintIndex = getFirstFreeConstraintIndex( $nucleus );

// The following line should be removed once constraints are updating
// for start frame inside the solver
	connectAttr "time1.outTime" ($constraint + ".currentTime" );

	connectAttr -f ($constraint + ".evalStart[0]") ($nucleus + ".inputStart[" + $nucleusConstraintIndex + "]");
	connectAttr -f ($constraint + ".evalCurrent[0]") ($nucleus + ".inputCurrent[" + $nucleusConstraintIndex + "]");

	// force update of nucleus for new constraint if start frame
	getAttr ($nucleus + ".forceDynamics" );

	select -r $constraint;
	if( $tearable ){
		print((uiRes("m_createNConstraint.kAdjustGlueStrength")));
	}
	return	$newNodes;
}
